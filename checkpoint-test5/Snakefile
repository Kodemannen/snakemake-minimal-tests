from pathlib import Path

datasets = ["A", "B"]

# Make input files:
for dataset_id in datasets:
    inputfiles = [Path(f"input-{dataset_id}/{i}.txt") for i in range(10)]
    Path(f"input-{dataset_id}").mkdir(exist_ok=True)
    for f in inputfiles:
        f.touch()






rule all:
    input:
        "collected/sum.txt"


for dataset_id in datasets:

    def get_successes(wildcards):

        ck_output = getattr(checkpoints, 
                        "process1-" + dataset_id).get(**wildcards).output[0]

        successes, = glob_wildcards(os.path.join(ck_output, "{num}.txt")) 



        return expand(f"output3-{dataset_id}/{{num}}.txt", num=successes)



    # Keep only files with even numbers:
    checkpoint:
        name: "process1-" + dataset_id
        input:
            inputfiles
        output:
            directory("output1-" + dataset_id)

        run:
            Path(output[0]).mkdir()

            for f in input:
                
                num = int(Path(f).stem)
            
                if num % 2 == 0:
                    
                    ting = Path(output[0])/Path(f).name
                    with open(ting, "w") as out:
                        out.write(str(num**2) + "\n")

                    

    rule:
        name: "process2-" + dataset_id
        input:
            f"output1-{dataset_id}/{{num}}.txt"
        output:
            f"output2-{dataset_id}/{{num}}.txt"
        run:
            # shell("mkdir output2 -p")
            with open(input[0], 'r') as f:
                num = eval(f.readline().strip())
            
            with open(output[0], 'w') as f:
                f.write(str(num)+"\n")
                



    rule:
        name: "process3-" + dataset_id
        input:
            f"output2-{dataset_id}/{{num}}.txt"
        output:
            f"output3-{dataset_id}/{{num}}.txt"
        run:
            # shell("mkdir output2 -p")
            with open(input[0], 'r') as f:
                num = eval(f.readline().strip())
            
            with open(output[0], 'w') as f:
                f.write(str(num % 30)+"\n")
                


rule collect:
    input:
        get_successes,
    output:
        "collected/sum.txt"
    run:
        sum = 0
        for inp in input:
            with open(inp, 'r') as f:
                num = eval(f.readline().strip())
                sum += num

        with open(output[0], 'w') as f:
            f.write(str(sum) + "\n") 

